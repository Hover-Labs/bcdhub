// Code generated by MockGen. DO NOT EDIT.
// Source: bigmap/repository.go

// Package bigmap is a generated GoMock package.
package bigmap

import (
	bm "github.com/baking-bad/bcdhub/internal/models/bigmap"
	types "github.com/baking-bad/bcdhub/internal/models/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(network types.Network, ptr int64, contract string) (*bm.BigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", network, ptr, contract)
	ret0, _ := ret[0].(*bm.BigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(network, ptr, contract interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), network, ptr, contract)
}

// GetByContract mocks base method
func (m *MockRepository) GetByContract(network types.Network, contract string) ([]bm.BigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByContract", network, contract)
	ret0, _ := ret[0].([]bm.BigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByContract indicates an expected call of GetByContract
func (mr *MockRepositoryMockRecorder) GetByContract(network, contract interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByContract", reflect.TypeOf((*MockRepository)(nil).GetByContract), network, contract)
}

// MockActionRepository is a mock of ActionRepository interface
type MockActionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockActionRepositoryMockRecorder
}

// MockActionRepositoryMockRecorder is the mock recorder for MockActionRepository
type MockActionRepositoryMockRecorder struct {
	mock *MockActionRepository
}

// NewMockActionRepository creates a new mock instance
func NewMockActionRepository(ctrl *gomock.Controller) *MockActionRepository {
	mock := &MockActionRepository{ctrl: ctrl}
	mock.recorder = &MockActionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActionRepository) EXPECT() *MockActionRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockActionRepository) Get(network types.Network, ptr int64) ([]bm.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", network, ptr)
	ret0, _ := ret[0].([]bm.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockActionRepositoryMockRecorder) Get(network, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockActionRepository)(nil).Get), network, ptr)
}

// MockDiffRepository is a mock of DiffRepository interface
type MockDiffRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDiffRepositoryMockRecorder
}

// MockDiffRepositoryMockRecorder is the mock recorder for MockDiffRepository
type MockDiffRepositoryMockRecorder struct {
	mock *MockDiffRepository
}

// NewMockDiffRepository creates a new mock instance
func NewMockDiffRepository(ctrl *gomock.Controller) *MockDiffRepository {
	mock := &MockDiffRepository{ctrl: ctrl}
	mock.recorder = &MockDiffRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiffRepository) EXPECT() *MockDiffRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDiffRepository) Get(ctx bm.GetContext) ([]bm.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].([]bm.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDiffRepositoryMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDiffRepository)(nil).Get), ctx)
}

// GetForOperation mocks base method
func (m *MockDiffRepository) GetForOperation(id int64) ([]*bm.Diff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForOperation", id)
	ret0, _ := ret[0].([]*bm.Diff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForOperation indicates an expected call of GetForOperation
func (mr *MockDiffRepositoryMockRecorder) GetForOperation(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForOperation", reflect.TypeOf((*MockDiffRepository)(nil).GetForOperation), id)
}

// GetForOperations mocks base method
func (m *MockDiffRepository) GetForOperations(ids ...int64) ([]bm.Diff, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetForOperations", varargs...)
	ret0, _ := ret[0].([]bm.Diff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForOperations indicates an expected call of GetForOperations
func (mr *MockDiffRepositoryMockRecorder) GetForOperations(ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForOperations", reflect.TypeOf((*MockDiffRepository)(nil).GetForOperations), ids...)
}

// GetByPtrAndKeyHash mocks base method
func (m *MockDiffRepository) GetByPtrAndKeyHash(ptr int64, network types.Network, keyHash string, size, offset int64) ([]bm.Diff, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPtrAndKeyHash", ptr, network, keyHash, size, offset)
	ret0, _ := ret[0].([]bm.Diff)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByPtrAndKeyHash indicates an expected call of GetByPtrAndKeyHash
func (mr *MockDiffRepositoryMockRecorder) GetByPtrAndKeyHash(ptr, network, keyHash, size, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPtrAndKeyHash", reflect.TypeOf((*MockDiffRepository)(nil).GetByPtrAndKeyHash), ptr, network, keyHash, size, offset)
}

// GetValuesByKey mocks base method
func (m *MockDiffRepository) GetValuesByKey(keyHash string) ([]bm.Diff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValuesByKey", keyHash)
	ret0, _ := ret[0].([]bm.Diff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValuesByKey indicates an expected call of GetValuesByKey
func (mr *MockDiffRepositoryMockRecorder) GetValuesByKey(keyHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValuesByKey", reflect.TypeOf((*MockDiffRepository)(nil).GetValuesByKey), keyHash)
}

// Previous mocks base method
func (m *MockDiffRepository) Previous(arg0 []bm.Diff) ([]bm.Diff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Previous", arg0)
	ret0, _ := ret[0].([]bm.Diff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Previous indicates an expected call of Previous
func (mr *MockDiffRepositoryMockRecorder) Previous(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Previous", reflect.TypeOf((*MockDiffRepository)(nil).Previous), arg0)
}

// Last mocks base method
func (m *MockDiffRepository) Last(network types.Network, ptr int64, keyHash string, skipRemoved bool) (bm.Diff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last", network, ptr, keyHash, skipRemoved)
	ret0, _ := ret[0].(bm.Diff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last
func (mr *MockDiffRepositoryMockRecorder) Last(network, ptr, keyHash, skipRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockDiffRepository)(nil).Last), network, ptr, keyHash, skipRemoved)
}

// MockStateRepository is a mock of StateRepository interface
type MockStateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStateRepositoryMockRecorder
}

// MockStateRepositoryMockRecorder is the mock recorder for MockStateRepository
type MockStateRepositoryMockRecorder struct {
	mock *MockStateRepository
}

// NewMockStateRepository creates a new mock instance
func NewMockStateRepository(ctrl *gomock.Controller) *MockStateRepository {
	mock := &MockStateRepository{ctrl: ctrl}
	mock.recorder = &MockStateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateRepository) EXPECT() *MockStateRepositoryMockRecorder {
	return m.recorder
}

// Current mocks base method
func (m *MockStateRepository) Current(network types.Network, keyHash string, ptr int64) (bm.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current", network, keyHash, ptr)
	ret0, _ := ret[0].(bm.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Current indicates an expected call of Current
func (mr *MockStateRepositoryMockRecorder) Current(network, keyHash, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockStateRepository)(nil).Current), network, keyHash, ptr)
}

// GetStats mocks base method
func (m *MockStateRepository) GetStats(network types.Network, ptr int64) (bm.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", network, ptr)
	ret0, _ := ret[0].(bm.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats
func (mr *MockStateRepositoryMockRecorder) GetStats(network, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockStateRepository)(nil).GetStats), network, ptr)
}

// ChangedAfter mocks base method
func (m *MockStateRepository) ChangedAfter(network types.Network, level int64) ([]bm.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangedAfter", network, level)
	ret0, _ := ret[0].([]bm.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangedAfter indicates an expected call of ChangedAfter
func (mr *MockStateRepositoryMockRecorder) ChangedAfter(network, level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangedAfter", reflect.TypeOf((*MockStateRepository)(nil).ChangedAfter), network, level)
}

// Keys mocks base method
func (m *MockStateRepository) Keys(ctx bm.GetContext) ([]bm.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", ctx)
	ret0, _ := ret[0].([]bm.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys
func (mr *MockStateRepositoryMockRecorder) Keys(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockStateRepository)(nil).Keys), ctx)
}

// GetByPtr mocks base method
func (m *MockStateRepository) GetByPtr(network types.Network, contract string, ptr int64) ([]bm.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPtr", network, contract, ptr)
	ret0, _ := ret[0].([]bm.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPtr indicates an expected call of GetByPtr
func (mr *MockStateRepositoryMockRecorder) GetByPtr(network, contract, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPtr", reflect.TypeOf((*MockStateRepository)(nil).GetByPtr), network, contract, ptr)
}

// GetForAddress mocks base method
func (m *MockStateRepository) GetForAddress(network types.Network, address string) ([]bm.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForAddress", network, address)
	ret0, _ := ret[0].([]bm.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForAddress indicates an expected call of GetForAddress
func (mr *MockStateRepositoryMockRecorder) GetForAddress(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForAddress", reflect.TypeOf((*MockStateRepository)(nil).GetForAddress), network, address)
}

// Count mocks base method
func (m *MockStateRepository) Count(network types.Network, ptr int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", network, ptr)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockStateRepositoryMockRecorder) Count(network, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockStateRepository)(nil).Count), network, ptr)
}
